{
  "modules": [
    {
      "name": "discord_voice_bot.__init__",
      "description": "Discord Voice TTS Bot - Zundamon voice integration.",
      "classes": [],
      "functions": []
    },
    {
      "name": "discord_voice_bot.__main__",
      "description": "Main entry point for the discord-voice-bot package.",
      "classes": [
        {
          "name": "BotManager",
          "description": "Manages bot lifecycle and graceful shutdown.",
          "attributes": [
            {
              "name": "bot_task",
              "type": "asyncio.Task[None] | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "shutdown_event",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "is_shutting_down",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "health_monitor",
              "type": "HealthMonitor | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize bot manager."
            },
            {
              "name": "setup_logging",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Set up structured logging."
            },
            {
              "name": "setup_signal_handlers",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Set up signal handlers for graceful shutdown."
            },
            {
              "name": "run",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Run the bot with proper lifecycle management."
            },
            {
              "name": "health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Perform startup health checks."
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "main",
          "parameters": [],
          "return_type": "None",
          "description": "Main entry point."
        },
        {
          "name": "sync_main",
          "parameters": [],
          "return_type": "None",
          "description": "Synchronous wrapper for main."
        }
      ]
    },
    {
      "name": "discord_voice_bot.audio_debugger",
      "description": "Comprehensive audio debugging system for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "AudioDebugger",
          "description": "Debug system for saving and validating audio at each pipeline stage.",
          "attributes": [
            {
              "name": "debug_dir",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "session_id",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "session_dir",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "log_file",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "debug_log",
              "type": "list[dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "debug_dir",
                  "type": "str"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize audio debugger.\n\nArgs:\n    debug_dir: Directory to save debug audio files"
            },
            {
              "name": "save_audio_stage",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_data",
                  "type": "bytes"
                },
                {
                  "name": "stage",
                  "type": "str"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "metadata",
                  "type": "dict[str, Any] | None"
                }
              ],
              "return_type": "Path",
              "description": "Save audio data for a specific pipeline stage.\n\nArgs:\n    audio_data: Raw audio data\n    stage: Pipeline stage name (e.g., 'tts_raw', 'discord_converted')\n    text: Original text that generated this audio\n    metadata: Additional metadata to save\n\nReturns:\n    Path to saved audio file"
            },
            {
              "name": "_analyze_audio_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "filepath",
                  "type": "Path"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Analyze audio file properties using ffprobe."
            },
            {
              "name": "_save_debug_log",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Save debug log to JSON file."
            },
            {
              "name": "create_test_audio",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "frequency",
                  "type": "int"
                },
                {
                  "name": "duration",
                  "type": "float"
                },
                {
                  "name": "sample_rate",
                  "type": "int"
                }
              ],
              "return_type": "Path",
              "description": "Create a test sine wave audio file for Discord testing.\n\nArgs:\n    frequency: Sine wave frequency in Hz\n    duration: Duration in seconds\n    sample_rate: Sample rate in Hz\n\nReturns:\n    Path to created test audio file"
            },
            {
              "name": "test_audio_playback",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "filepath",
                  "type": "Path"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Test audio file playback using system tools.\n\nArgs:\n    filepath: Path to audio file to test\n\nReturns:\n    Dictionary with test results"
            },
            {
              "name": "get_session_summary",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get summary of current debugging session."
            },
            {
              "name": "generate_report",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Generate comprehensive debugging report."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.audio_processor",
      "description": "Audio processing and optimization for TTS engine.",
      "classes": [
        {
          "name": "AudioQuery",
          "description": "TypedDict for audio query parameters with optional fields.",
          "attributes": [
            {
              "name": "outputSamplingRate",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "volumeScale",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "speedScale",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "pitchScale",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "intonationScale",
              "type": "float",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "AudioFormatInfo",
          "description": "TypedDict for audio format information.",
          "attributes": [
            {
              "name": "sample_rate",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "channels",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "bits_per_sample",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "format",
              "type": "str",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "byte_rate",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "block_align",
              "type": "int",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "AudioProcessor",
          "description": "Handles audio processing and optimization for TTS.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize audio processor with configuration manager."
            },
            {
              "name": "optimize_audio_parameters",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_query",
                  "type": "AudioQuery"
                }
              ],
              "return_type": "None",
              "description": "Optimize audio parameters for Discord voice quality.\n\nArgs:\n    audio_query: Audio query dictionary to optimize"
            },
            {
              "name": "create_wav_header",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "data_size",
                  "type": "int"
                },
                {
                  "name": "sample_rate",
                  "type": "int"
                },
                {
                  "name": "channels",
                  "type": "int"
                }
              ],
              "return_type": "bytes",
              "description": "Create WAV file header for raw PCM data.\n\nArgs:\n    data_size: Size of PCM data in bytes\n    sample_rate: Sample rate in Hz\n    channels: Number of audio channels\n\nReturns:\n    WAV header as bytes"
            },
            {
              "name": "validate_audio_data",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_data",
                  "type": "bytes"
                }
              ],
              "return_type": "bool",
              "description": "Validate audio data integrity.\n\nArgs:\n    audio_data: Audio data to validate\n\nReturns:\n    True if audio data is valid, False otherwise"
            },
            {
              "name": "get_audio_format_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "sample_rate",
                  "type": "int"
                },
                {
                  "name": "channels",
                  "type": "int"
                }
              ],
              "return_type": "AudioFormatInfo",
              "description": "Get audio format information for the given parameters.\n\nArgs:\n    sample_rate: Sample rate in Hz\n    channels: Number of audio channels\n\nReturns:\n    Dictionary with audio format information"
            },
            {
              "name": "optimize_for_discord",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_query",
                  "type": "AudioQuery"
                }
              ],
              "return_type": "AudioQuery",
              "description": "Optimize audio query specifically for Discord voice channels.\n\nArgs:\n    audio_query: Original audio query\n\nReturns:\n    Optimized audio query for Discord"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.bot",
      "description": "Discord Voice TTS Bot - Main Entry Point.",
      "classes": [
        {
          "name": "DiscordVoiceTTSBot",
          "description": "Main Discord Voice TTS Bot class.",
          "attributes": [
            {
              "name": "config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "voice_handler",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "event_handler",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "command_handler",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "slash_handler",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "message_validator",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "status_manager",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "health_monitor",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "startup_complete",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "startup_connection_failures",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "monitor_task",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "stats",
              "type": "dict[str, Any]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Initialize the bot.\n\nArgs:\n    config_manager: Configuration manager instance"
            },
            {
              "name": "start_with_config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start the bot using the stored configuration."
            },
            {
              "name": "on_ready",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot ready event and delegate to event handler."
            },
            {
              "name": "change_presence",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "status",
                  "type": "Any"
                },
                {
                  "name": "activity",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Change bot presence (required by StartupBot protocol)."
            },
            {
              "name": "config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "Backward compatibility property for config access."
            },
            {
              "name": "on_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Delegate message events to the event handler and process commands."
            },
            {
              "name": "on_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "member",
                  "type": "Any"
                },
                {
                  "name": "before",
                  "type": "Any"
                },
                {
                  "name": "after",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Delegate voice state updates to the event handler."
            },
            {
              "name": "on_disconnect",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Delegate disconnect events to the event handler."
            },
            {
              "name": "on_resumed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Delegate resume events to the event handler."
            },
            {
              "name": "on_error",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "event",
                  "type": "str"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Delegate errors to the event handler for centralized logging."
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "run_bot",
          "parameters": [],
          "return_type": "None",
          "description": "Create and run the Discord bot."
        }
      ]
    },
    {
      "name": "discord_voice_bot.bot_factory",
      "description": "Bot factory for Discord Voice TTS Bot initialization and configuration.",
      "classes": [
        {
          "name": "ComponentRegistry",
          "description": "Registry for managing bot components.",
          "attributes": [
            {
              "name": "_components",
              "type": "dict[str, Any]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize component registry."
            },
            {
              "name": "register",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                },
                {
                  "name": "component",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Register a component.\n\nArgs:\n    name: Component name\n    component: Component instance"
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "Get a component by name.\n\nArgs:\n    name: Component name\n\nReturns:\n    Component instance or None if not found"
            },
            {
              "name": "get_all",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get all registered components.\n\nReturns:\n    Dictionary of all components"
            },
            {
              "name": "clear",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clear all registered components."
            }
          ]
        },
        {
          "name": "BotFactory",
          "description": "Factory for creating and configuring Discord Voice TTS Bot instances.",
          "attributes": [
            {
              "name": "registry",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize bot factory."
            },
            {
              "name": "create_bot",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot_class",
                  "type": "type[Any] | None"
                }
              ],
              "return_type": "Any",
              "description": "Create and configure a new bot instance.\n\nArgs:\n    bot_class: Bot class to instantiate (defaults to DiscordVoiceTTSBot)\n\nReturns:\n    Configured bot instance"
            },
            {
              "name": "_setup_components",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManagerImpl"
                }
              ],
              "return_type": "None",
              "description": "Setup all bot components.\n\nArgs:\n    bot: Bot instance to setup components for\n    config_manager: Configuration manager used by components during initialization."
            },
            {
              "name": "_create_event_handler",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManagerImpl"
                }
              ],
              "return_type": "'EventHandler'",
              "description": "Create event handler.\n\nArgs:\n    bot: Bot instance\n    config_manager: Configuration manager\n\nReturns:\n    Configured event handler"
            },
            {
              "name": "_create_command_handler",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "'CommandHandler'",
              "description": "Create command handler.\n\nArgs:\n    bot: Bot instance\n\nReturns:\n    Configured command handler"
            },
            {
              "name": "_create_slash_command_handler",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Create slash command handler.\n\nArgs:\n    bot: Bot instance\n\nReturns:\n    Configured slash command handler or None if not available"
            },
            {
              "name": "_create_message_validator",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "'MessageValidator'",
              "description": "Create message validator.\n\nArgs:\n    bot: Bot instance\n\nReturns:\n    Configured message validator"
            },
            {
              "name": "_create_status_manager",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "'StatusManager'",
              "description": "Create status manager.\n\nArgs:\n    bot: Bot instance\n\nReturns:\n    Configured status manager"
            },
            {
              "name": "_create_voice_handler",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManagerImpl"
                }
              ],
              "return_type": "Any",
              "description": "Create voice handler.\n\nArgs:\n    bot: Bot instance\n    config_manager: Configuration manager\n\nReturns:\n    Configured voice handler"
            },
            {
              "name": "_create_health_monitor",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManagerImpl"
                }
              ],
              "return_type": "Any",
              "description": "Create health monitor.\n\nArgs:\n    bot: Bot instance\n    config_manager: Configuration manager\n\nReturns:\n    Configured health monitor"
            },
            {
              "name": "_setup_existing_components",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Setup existing components that are already part of the bot.\n\nArgs:\n    bot: Bot instance"
            },
            {
              "name": "_validate_configuration",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManagerImpl"
                }
              ],
              "return_type": "None",
              "description": "Validate bot configuration and components.\n\nArgs:\n    bot: Bot instance to validate\n    config_manager: Configuration manager to validate\n\nRaises:\n    ValueError: If configuration is invalid\n    RuntimeError: If required components are missing"
            },
            {
              "name": "initialize_services",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Initialize external services and dependencies.\n\nArgs:\n    bot: Bot instance"
            },
            {
              "name": "get_component_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get information about registered components.\n\nReturns:\n    Dictionary with component information"
            },
            {
              "name": "get_initialization_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get comprehensive initialization status.\n\nArgs:\n    bot: Bot instance\n\nReturns:\n    Dictionary with initialization status"
            },
            {
              "name": "shutdown_bot",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Gracefully shutdown bot and cleanup resources.\n\nArgs:\n    bot: Bot instance to shutdown"
            },
            {
              "name": "reset_factory",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset factory to initial state."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.command_handler",
      "description": "Command handling for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "CommandHandler",
          "description": "Handles prefix-based commands with registration and execution.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_commands",
              "type": "dict[str, dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "HasStatusManager"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize command handler.\n\nArgs:\n    bot: The Discord bot instance with status manager"
            },
            {
              "name": "register_command",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                },
                {
                  "name": "func",
                  "type": "Callable[..., Any]"
                },
                {
                  "name": "aliases",
                  "type": "list[str] | None"
                },
                {
                  "name": "help_text",
                  "type": "str"
                },
                {
                  "name": "usage",
                  "type": "str"
                },
                {
                  "name": "permissions",
                  "type": "list[str] | None"
                }
              ],
              "return_type": "None",
              "description": "Register a new command.\n\nArgs:\n    name: Command name\n    func: Command function\n    aliases: Optional list of command aliases\n    help_text: Help description for the command\n    usage: Usage instructions\n    permissions: Required permissions"
            },
            {
              "name": "process_command",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "bool",
              "description": "Process a command message.\n\nArgs:\n    message: Discord message containing command\n\nReturns:\n    True if command was processed, False otherwise"
            },
            {
              "name": "_create_context",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                },
                {
                  "name": "command_name",
                  "type": "str"
                },
                {
                  "name": "args",
                  "type": "list[str]"
                }
              ],
              "return_type": "commands.Context[Any]",
              "description": "Create a command context for the message.\n\nArgs:\n    message: Original Discord message\n    command_name: Name of the command\n    args: Command arguments\n\nReturns:\n    Command context"
            },
            {
              "name": "_create_send_func",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "Callable[..., Any]",
              "description": "Create a send function for the context."
            },
            {
              "name": "_create_reply_func",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "Callable[..., Any]",
              "description": "Create a reply function for the context."
            },
            {
              "name": "get_command_help",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "command_name",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Get help text for a command.\n\nArgs:\n    command_name: Name of the command\n\nReturns:\n    Help text for the command"
            },
            {
              "name": "list_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[str]",
              "description": "List all available commands.\n\nReturns:\n    List of command names (excluding aliases)"
            },
            {
              "name": "get_command_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "command_name",
                  "type": "str"
                }
              ],
              "return_type": "dict[str, Any] | None",
              "description": "Get detailed information about a command.\n\nArgs:\n    command_name: Name of the command\n\nReturns:\n    Dictionary with command information, or None if not found"
            },
            {
              "name": "unregister_command",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "bool",
              "description": "Unregister a command.\n\nArgs:\n    name: Command name to unregister\n\nReturns:\n    True if command was unregistered, False otherwise"
            },
            {
              "name": "clear_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clear all registered commands."
            },
            {
              "name": "has_command",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "bool",
              "description": "Check if a command exists.\n\nArgs:\n    name: Command name to check\n\nReturns:\n    True if command exists, False otherwise"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.config",
      "description": "Configuration management for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "Config",
          "description": "Configuration manager for the Discord Voice TTS Bot.",
          "attributes": [
            {
              "name": "discord_token",
              "type": "str",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "target_guild_id",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "target_voice_channel_id",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "tts_engine",
              "type": "str",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "tts_speaker",
              "type": "str",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "engines",
              "type": "dict[str, dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "command_prefix",
              "type": "str",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "max_message_length",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "message_queue_size",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "reconnect_delay",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "audio_sample_rate",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "audio_channels",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "audio_frame_duration",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "rate_limit_messages",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "rate_limit_period",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "log_level",
              "type": "str",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "log_file",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "debug",
              "type": "bool",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "enable_self_message_processing",
              "type": "bool",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize configuration from environment variables."
            },
            {
              "name": "_get_required_env",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Get required environment variable or raise error."
            },
            {
              "name": "engine_config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current TTS engine configuration."
            },
            {
              "name": "api_url",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get TTS API URL for current engine."
            },
            {
              "name": "speaker_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get speaker ID for current engine and speaker setting."
            },
            {
              "name": "get_intents",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "Get Discord intents required for the bot."
            },
            {
              "name": "validate",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Validate configuration settings."
            }
          ]
        },
        {
          "name": "_ConfigProxy",
          "description": "Proxy to delay config creation until first access.",
          "attributes": [],
          "methods": [
            {
              "name": "__getattr__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_config",
          "parameters": [],
          "return_type": "Config",
          "description": "Return a process-wide singleton Config without using globals."
        }
      ]
    },
    {
      "name": "discord_voice_bot.config_manager",
      "description": "Configuration manager to eliminate circular imports.",
      "classes": [
        {
          "name": "ConfigManagerImpl",
          "description": "Configuration manager implementation that wraps the existing Config class.",
          "attributes": [
            {
              "name": "_config",
              "type": "Any",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize configuration manager."
            },
            {
              "name": "_get_config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "Get configuration instance, creating it if necessary."
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "default",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Get configuration value by key."
            },
            {
              "name": "get_api_url",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get TTS API URL."
            },
            {
              "name": "get_speaker_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get default speaker ID."
            },
            {
              "name": "get_tts_engine",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get TTS engine name."
            },
            {
              "name": "get_audio_sample_rate",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get audio sample rate."
            },
            {
              "name": "get_audio_channels",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get audio channels."
            },
            {
              "name": "get_log_level",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get logging level."
            },
            {
              "name": "validate",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Validate configuration."
            },
            {
              "name": "get_discord_token",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get Discord bot token."
            },
            {
              "name": "get_target_guild_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get target guild ID."
            },
            {
              "name": "get_target_voice_channel_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get target voice channel ID."
            },
            {
              "name": "get_command_prefix",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get command prefix."
            },
            {
              "name": "get_engine_config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current TTS engine configuration."
            },
            {
              "name": "get_engines",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, dict[str, Any]]",
              "description": "Get all engine configurations."
            },
            {
              "name": "get_max_message_length",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get maximum message length."
            },
            {
              "name": "get_message_queue_size",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get message queue size."
            },
            {
              "name": "get_reconnect_delay",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get reconnect delay."
            },
            {
              "name": "get_rate_limit_messages",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get rate limit messages."
            },
            {
              "name": "get_rate_limit_period",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get rate limit period."
            },
            {
              "name": "get_log_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str | None",
              "description": "Get log file path."
            },
            {
              "name": "is_debug",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if debug mode is enabled."
            },
            {
              "name": "get_intents",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "Get Discord intents."
            },
            {
              "name": "get_enable_self_message_processing",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if self-message processing is enabled."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.content_filter",
      "description": "Content filtering and cleaning for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "ContentFilter",
          "description": "Handles content filtering and cleaning for TTS processing.",
          "attributes": [
            {
              "name": "_url_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_channel_mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_role_mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_emoji_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_animated_emoji_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_max_message_length",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize content filter."
            },
            {
              "name": "set_max_length",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "max_length",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Set maximum message length.\n\nArgs:\n    max_length: Maximum allowed message length"
            },
            {
              "name": "filter_content",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "str",
              "description": "Filter and clean message content for TTS.\n\nArgs:\n    message: Discord message\n\nReturns:\n    Filtered content suitable for TTS"
            },
            {
              "name": "_clean_markdown",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Remove markdown formatting from content.\n\nArgs:\n    content: Content with markdown\n\nReturns:\n    Content without markdown"
            },
            {
              "name": "_clean_whitespace",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Clean excessive whitespace.\n\nArgs:\n    content: Content to clean\n\nReturns:\n    Content with normalized whitespace"
            },
            {
              "name": "validate_content_length",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Validate content length for TTS processing.\n\nArgs:\n    content: Filtered content\n\nReturns:\n    Tuple of (is_valid, reason)"
            },
            {
              "name": "get_url_pattern",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "re.Pattern[str]",
              "description": "Get URL pattern for testing.\n\nReturns:\n    Compiled URL regex pattern"
            },
            {
              "name": "get_mention_pattern",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "re.Pattern[str]",
              "description": "Get mention pattern for testing.\n\nReturns:\n    Compiled mention regex pattern"
            },
            {
              "name": "get_suspicious_patterns",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[str]",
              "description": "Get suspicious patterns for testing.\n\nReturns:\n    List of suspicious regex patterns"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.event_connection_handler",
      "description": "Connection handling for event handler.",
      "classes": [
        {
          "name": "ConnectionHandler",
          "description": "Handles voice connection events and reconnection logic.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_voice_state_updating",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "target_channel_id",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "'ConfigManager'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize connection handler."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "member",
                  "type": "discord.Member"
                },
                {
                  "name": "before",
                  "type": "discord.VoiceState"
                },
                {
                  "name": "after",
                  "type": "discord.VoiceState"
                }
              ],
              "return_type": "None",
              "description": "Handle voice state update events with improved reconnection logic."
            },
            {
              "name": "handle_disconnect",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot disconnect."
            },
            {
              "name": "handle_resumed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot resume."
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event with proper Discord API compliance."
            },
            {
              "name": "handle_error",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "event",
                  "type": "str"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Handle general errors with full stack trace."
            },
            {
              "name": "set_target_channel_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Set the target voice channel ID."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.event_handler",
      "description": "Discord event handling for Voice TTS Bot.",
      "classes": [
        {
          "name": "EventHandler",
          "description": "Handles Discord events using facade pattern with specialized managers.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "startup_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "message_handler",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "connection_handler",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "target_channel_id",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "'ConfigManager'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize event handler with manager components.\n\nArgs:\n    bot: The Discord bot instance with required components\n    config_manager: Configuration manager instance"
            },
            {
              "name": "handle_ready",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot ready event using startup manager."
            },
            {
              "name": "handle_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "None",
              "description": "Handle message events using message handler."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "member",
                  "type": "discord.Member"
                },
                {
                  "name": "before",
                  "type": "discord.VoiceState"
                },
                {
                  "name": "after",
                  "type": "discord.VoiceState"
                }
              ],
              "return_type": "None",
              "description": "Handle voice state update events using connection handler."
            },
            {
              "name": "handle_disconnect",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot disconnect using connection handler."
            },
            {
              "name": "handle_resumed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle bot resume using connection handler."
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event using connection handler."
            },
            {
              "name": "handle_error",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "event",
                  "type": "str"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Handle general errors using connection handler."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.event_message_handler",
      "description": "Message handling for event handler.",
      "classes": [
        {
          "name": "MessageHandler",
          "description": "Handles Discord message events and processing.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "DiscordBot"
                },
                {
                  "name": "config_manager",
                  "type": "'ConfigManager'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize message handler."
            },
            {
              "name": "handle_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "None",
              "description": "Handle message events with proper filtering and validation."
            },
            {
              "name": "_should_process_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "bool",
              "description": "Determine if a message should be processed following Discord's patterns."
            },
            {
              "name": "_validate_and_process_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "dict[str, Any] | None",
              "description": "Validate and process message with proper sanitization."
            },
            {
              "name": "_sanitize_message_content",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Sanitize message content for TTS processing."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.event_startup_manager",
      "description": "Startup management for event handler.",
      "classes": [
        {
          "name": "StartupManager",
          "description": "Manages bot startup sequence and initialization.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "target_channel_id",
              "type": "int",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "'StartupBot'"
                },
                {
                  "name": "config_manager",
                  "type": "'ConfigManager'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize startup manager."
            },
            {
              "name": "handle_startup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Handle complete bot startup sequence."
            },
            {
              "name": "_initialize_components",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize bot components."
            },
            {
              "name": "_attempt_voice_connection",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Attempt to connect to the target voice channel."
            },
            {
              "name": "_sync_slash_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Sync slash commands with Discord."
            },
            {
              "name": "_log_troubleshooting_tips",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Log troubleshooting tips for connection failures."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.health_monitor",
      "description": "Enhanced health monitoring system for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "FailureRecord",
          "description": "Record of a system failure.",
          "attributes": [
            {
              "name": "timestamp",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "failure_type",
              "type": "str",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "details",
              "type": "str",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "resolved",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "resolution_time",
              "type": "float | None",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HealthStatus",
          "description": "Comprehensive health status information.",
          "attributes": [
            {
              "name": "healthy",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "issues",
              "type": "list[str]",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "recommendations",
              "type": "list[str]",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "last_check",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "failure_count",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "recent_failures",
              "type": "list[FailureRecord]",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HealthMonitor",
          "description": "Comprehensive health monitoring system with automatic termination.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "status",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_monitoring_task",
              "type": "asyncio.Task[None] | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_permission_check_task",
              "type": "asyncio.Task[None] | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_termination_conditions",
              "type": "dict[str, dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_graceful_shutdown",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_shutdown_reason",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_shutdown_task",
              "type": "asyncio.Task[None] | None",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot_client",
                  "type": "discord.Client | DiscordBotClient"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize health monitor."
            },
            {
              "name": "start",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start health monitoring tasks."
            },
            {
              "name": "stop",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Stop health monitoring tasks."
            },
            {
              "name": "record_disconnection",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "reason",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Record a voice disconnection event."
            },
            {
              "name": "record_api_failure",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a TTS API failure."
            },
            {
              "name": "record_api_success",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record TTS API success (resets failure count)."
            },
            {
              "name": "_health_monitoring_loop",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Main health monitoring loop."
            },
            {
              "name": "_permission_check_loop",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Permission checking loop."
            },
            {
              "name": "_perform_health_checks",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Perform comprehensive health checks."
            },
            {
              "name": "_check_voice_connection_health",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "tuple[bool, list[str]]",
              "description": "Check voice connection health."
            },
            {
              "name": "_check_bot_permissions",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Check bot permissions across all accessible guilds."
            },
            {
              "name": "_check_critical_permissions",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "tuple[bool, list[str]]",
              "description": "Check critical permissions for bot operation."
            },
            {
              "name": "_check_termination_conditions",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Check if any termination conditions are met."
            },
            {
              "name": "_trigger_termination",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "reason",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Trigger server termination with detailed logging."
            },
            {
              "name": "_perform_shutdown",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Perform graceful shutdown."
            },
            {
              "name": "get_health_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current health status information."
            },
            {
              "name": "perform_health_checks_for_testing",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Perform health checks for testing purposes.\n\nThis is a public method to allow tests to trigger health checks\nwithout accessing private methods."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.message_processor",
      "description": "Message processing and filtering for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "RateLimiter",
          "description": "Rate limiter to prevent message spam.",
          "attributes": [
            {
              "name": "max_messages",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "message_times",
              "type": "dict[int, deque[datetime]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "period",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "max_messages",
                  "type": "int"
                },
                {
                  "name": "period_seconds",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Initialize rate limiter.\n\nArgs:\n    max_messages: Maximum messages allowed in period\n    period_seconds: Time period in seconds"
            },
            {
              "name": "is_allowed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "bool",
              "description": "Check if user is allowed to send message based on rate limit."
            },
            {
              "name": "reset_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Reset rate limit for specific user."
            },
            {
              "name": "get_remaining_time",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "int | None",
              "description": "Get remaining time in seconds until user can send another message."
            }
          ]
        },
        {
          "name": "MessageProcessor",
          "description": "Process and filter messages for TTS synthesis.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "rate_limiter",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "blocked_users",
              "type": "set[int]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "ignored_prefixes",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "emoji_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "animated_emoji_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "channel_mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "role_mention_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "url_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "japanese_emoticon_pattern",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize message processor."
            },
            {
              "name": "should_process_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "Any"
                },
                {
                  "name": "bot_user_id",
                  "type": "int | None"
                }
              ],
              "return_type": "bool",
              "description": "Determine if message should be processed for TTS.\n\nArgs:\n    message: Discord message object\n    bot_user_id: Optional bot user ID for self-message processing\n\nReturns:\n    True if message should be processed, False otherwise"
            },
            {
              "name": "process_message_content",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                },
                {
                  "name": "author_name",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Process message content for TTS synthesis.\n\nArgs:\n    content: Raw message content\n    author_name: Author name for context\n\nReturns:\n    Processed content suitable for TTS"
            },
            {
              "name": "_process_discord_markup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Process Discord-specific markup (mentions, emojis, etc.)."
            },
            {
              "name": "_clean_text_for_tts",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "content",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Clean text for better TTS pronunciation."
            },
            {
              "name": "add_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Add user to blocked list."
            },
            {
              "name": "remove_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Remove user from blocked list."
            },
            {
              "name": "reset_rate_limit",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Reset rate limit for specific user."
            },
            {
              "name": "get_stats",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, int]",
              "description": "Get processing statistics."
            },
            {
              "name": "chunk_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "max_chunk_size",
                  "type": "int"
                }
              ],
              "return_type": "list[str]",
              "description": "Split long message into chunks at sentence boundaries.\n\nArgs:\n    text: Text to chunk\n    max_chunk_size: Maximum size of each chunk\n\nReturns:\n    List of text chunks"
            },
            {
              "name": "create_tts_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "Any"
                },
                {
                  "name": "bot_user_id",
                  "type": "int | None"
                }
              ],
              "return_type": "str | None",
              "description": "Create TTS message from Discord message.\n\nArgs:\n    message: Discord message object\n    bot_user_id: Optional bot user ID for self-message processing\n\nReturns:\n    Processed message content for TTS, or None if shouldn't be processed"
            },
            {
              "name": "process_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "Any"
                },
                {
                  "name": "bot_user_id",
                  "type": "int | None"
                }
              ],
              "return_type": "dict[str, Any] | None",
              "description": "Process Discord message for TTS with chunking support.\n\nArgs:\n    message: Discord message object\n    bot_user_id: Optional bot user ID for self-message processing\n\nReturns:\n    Dictionary with processed message data, or None if shouldn't be processed"
            }
          ]
        },
        {
          "name": "_MessageProcessorProxy",
          "description": "Proxy to delay message processor creation until first access.",
          "attributes": [],
          "methods": [
            {
              "name": "__getattr__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_message_processor",
          "parameters": [
            {
              "name": "config_manager",
              "type": "ConfigManager"
            }
          ],
          "return_type": "MessageProcessor",
          "description": "Return a process-wide singleton MessageProcessor without globals."
        }
      ]
    },
    {
      "name": "discord_voice_bot.message_validator",
      "description": "Core message validation for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "ValidationResult",
          "description": "Result of message validation.",
          "attributes": [
            {
              "name": "is_valid",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "reason",
              "type": "str",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "filtered_content",
              "type": "str",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "warnings",
              "type": "list[str]",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "metadata",
              "type": "dict[str, Any]",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "MessageValidator",
          "description": "Core validation logic for Discord messages.",
          "attributes": [
            {
              "name": "content_filter",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "permission_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_suspicious_patterns",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_max_message_length",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_max_special_chars_ratio",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize message validator."
            },
            {
              "name": "validate_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "ValidationResult",
              "description": "Validate a Discord message for TTS processing.\n\nArgs:\n    message: Discord message to validate\n\nReturns:\n    Validation result"
            },
            {
              "name": "_basic_message_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                },
                {
                  "name": "result",
                  "type": "ValidationResult"
                }
              ],
              "return_type": "bool",
              "description": "Perform basic message validation checks.\n\nArgs:\n    message: Discord message\n    result: Validation result to update\n\nReturns:\n    True if checks pass, False otherwise"
            },
            {
              "name": "_content_safety_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                },
                {
                  "name": "result",
                  "type": "ValidationResult"
                }
              ],
              "return_type": "bool",
              "description": "Check message content for safety and appropriateness.\n\nArgs:\n    message: Discord message\n    result: Validation result to update\n\nReturns:\n    True if content is safe, False otherwise"
            },
            {
              "name": "_user_permission_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                },
                {
                  "name": "result",
                  "type": "ValidationResult"
                }
              ],
              "return_type": "bool",
              "description": "Check if user has permission to send TTS messages.\n\nArgs:\n    message: Discord message\n    result: Validation result to update\n\nReturns:\n    True if user has permission, False otherwise"
            },
            {
              "name": "_rate_limit_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                },
                {
                  "name": "result",
                  "type": "ValidationResult"
                }
              ],
              "return_type": "bool",
              "description": "Check if user is within rate limits.\n\nArgs:\n    message: Discord message\n    result: Validation result to update\n\nReturns:\n    True if within limits, False otherwise"
            },
            {
              "name": "should_process_message",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "bool",
              "description": "Quick check to determine if message should be processed.\n\nArgs:\n    message: Discord message\n\nReturns:\n    True if message should be processed, False otherwise"
            },
            {
              "name": "get_stats",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get validation statistics.\n\nReturns:\n    Dictionary with validation statistics"
            },
            {
              "name": "add_blocked_word",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "word",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Add a word to the blocked list.\n\nArgs:\n    word: Word to block"
            },
            {
              "name": "remove_blocked_word",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "word",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Remove a word from the blocked list.\n\nArgs:\n    word: Word to unblock"
            },
            {
              "name": "add_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Add a user to the blocked list.\n\nArgs:\n    user_id: Discord user ID to block"
            },
            {
              "name": "remove_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Remove a user from the blocked list.\n\nArgs:\n    user_id: Discord user ID to unblock"
            },
            {
              "name": "add_blocked_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Add a channel to the blocked list.\n\nArgs:\n    channel_id: Discord channel ID to block"
            },
            {
              "name": "remove_blocked_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Remove a channel from the blocked list.\n\nArgs:\n    channel_id: Discord channel ID to unblock"
            },
            {
              "name": "reset_filters",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset all filters to default state."
            },
            {
              "name": "get_blocked_words",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[str]",
              "description": "Get blocked words for testing.\n\nReturns:\n    Set of blocked words"
            },
            {
              "name": "get_blocked_users",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[int]",
              "description": "Get blocked users for testing.\n\nReturns:\n    Set of blocked user IDs"
            },
            {
              "name": "get_blocked_channels",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[int]",
              "description": "Get blocked channels for testing.\n\nReturns:\n    Set of blocked channel IDs"
            },
            {
              "name": "get_allowed_domains",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[str]",
              "description": "Get allowed domains for testing.\n\nReturns:\n    Set of allowed domains"
            },
            {
              "name": "get_url_pattern",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "re.Pattern[str]",
              "description": "Get URL pattern for testing.\n\nReturns:\n    Compiled URL regex pattern"
            },
            {
              "name": "get_mention_pattern",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "re.Pattern[str]",
              "description": "Get mention pattern for testing.\n\nReturns:\n    Compiled mention regex pattern"
            },
            {
              "name": "get_suspicious_patterns",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[str]",
              "description": "Get suspicious patterns for testing.\n\nReturns:\n    List of suspicious regex patterns"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.permission_manager",
      "description": "Permission and access control management for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "PermissionManager",
          "description": "Manages permissions and access control for TTS functionality.",
          "attributes": [
            {
              "name": "_blocked_words",
              "type": "set[str]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_allowed_domains",
              "type": "set[str]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_blocked_users",
              "type": "set[int]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_blocked_channels",
              "type": "set[int]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize permission manager."
            },
            {
              "name": "check_user_permission",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Check if user has permission to send TTS messages.\n\nArgs:\n    message: Discord message\n\nReturns:\n    Tuple of (has_permission, reason)"
            },
            {
              "name": "check_rate_limit",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Check if user is within rate limits.\n\nArgs:\n    message: Discord message\n\nReturns:\n    Tuple of (within_limits, reason)"
            },
            {
              "name": "check_content_safety",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message",
                  "type": "discord.Message"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Check message content for safety and appropriateness.\n\nArgs:\n    message: Discord message\n\nReturns:\n    Tuple of (is_safe, reason)"
            },
            {
              "name": "add_blocked_word",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "word",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Add a word to the blocked list.\n\nArgs:\n    word: Word to block"
            },
            {
              "name": "remove_blocked_word",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "word",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Remove a word from the blocked list.\n\nArgs:\n    word: Word to unblock"
            },
            {
              "name": "add_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Add a user to the blocked list.\n\nArgs:\n    user_id: Discord user ID to block"
            },
            {
              "name": "remove_blocked_user",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Remove a user from the blocked list.\n\nArgs:\n    user_id: Discord user ID to unblock"
            },
            {
              "name": "add_blocked_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Add a channel to the blocked list.\n\nArgs:\n    channel_id: Discord channel ID to block"
            },
            {
              "name": "remove_blocked_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Remove a channel from the blocked list.\n\nArgs:\n    channel_id: Discord channel ID to unblock"
            },
            {
              "name": "get_statistics",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, int]",
              "description": "Get permission statistics.\n\nReturns:\n    Dictionary with permission statistics"
            },
            {
              "name": "reset_filters",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset all filters to default state."
            },
            {
              "name": "get_blocked_words",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[str]",
              "description": "Get blocked words for testing.\n\nReturns:\n    Set of blocked words"
            },
            {
              "name": "get_blocked_users",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[int]",
              "description": "Get blocked users for testing.\n\nReturns:\n    Set of blocked user IDs"
            },
            {
              "name": "get_blocked_channels",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[int]",
              "description": "Get blocked channels for testing.\n\nReturns:\n    Set of blocked channel IDs"
            },
            {
              "name": "get_allowed_domains",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "set[str]",
              "description": "Get allowed domains for testing.\n\nReturns:\n    Set of allowed domains"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.protocols",
      "description": "Protocol definitions for Discord Voice TTS Bot components.",
      "classes": [
        {
          "name": "ConfigManager",
          "description": "Protocol for configuration management to avoid circular imports.",
          "attributes": [],
          "methods": [
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "default",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Get configuration value by key."
            },
            {
              "name": "get_api_url",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get TTS API URL."
            },
            {
              "name": "get_speaker_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get default speaker ID."
            },
            {
              "name": "get_tts_engine",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get TTS engine name."
            },
            {
              "name": "get_audio_sample_rate",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get audio sample rate."
            },
            {
              "name": "get_audio_channels",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get audio channels."
            },
            {
              "name": "get_log_level",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get logging level."
            },
            {
              "name": "validate",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Validate configuration."
            },
            {
              "name": "get_discord_token",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get Discord bot token."
            },
            {
              "name": "get_target_guild_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get target guild ID."
            },
            {
              "name": "get_target_voice_channel_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get target voice channel ID."
            },
            {
              "name": "get_command_prefix",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get command prefix."
            },
            {
              "name": "get_engine_config",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current TTS engine configuration."
            },
            {
              "name": "get_engines",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, dict[str, Any]]",
              "description": "Get all engine configurations."
            },
            {
              "name": "get_max_message_length",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get maximum message length."
            },
            {
              "name": "get_message_queue_size",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get message queue size."
            },
            {
              "name": "get_reconnect_delay",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get reconnect delay."
            },
            {
              "name": "get_rate_limit_messages",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get rate limit messages."
            },
            {
              "name": "get_rate_limit_period",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get rate limit period."
            },
            {
              "name": "get_log_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str | None",
              "description": "Get log file path."
            },
            {
              "name": "is_debug",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if debug mode is enabled."
            },
            {
              "name": "get_intents",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "Get Discord intents."
            },
            {
              "name": "get_enable_self_message_processing",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if self-message processing is enabled."
            }
          ]
        },
        {
          "name": "HasConfig",
          "description": "Protocol for objects that have configuration.",
          "attributes": [
            {
              "name": "config",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasVoiceHandler",
          "description": "Protocol for objects that have voice handler.",
          "attributes": [
            {
              "name": "voice_handler",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasHealthMonitor",
          "description": "Protocol for objects that have health monitor.",
          "attributes": [
            {
              "name": "health_monitor",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasStatusManager",
          "description": "Protocol for objects that have status manager.",
          "attributes": [
            {
              "name": "status_manager",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasEventHandler",
          "description": "Protocol for objects that have event handler.",
          "attributes": [
            {
              "name": "event_handler",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasCommandHandler",
          "description": "Protocol for objects that have command handler.",
          "attributes": [
            {
              "name": "command_handler",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasSlashHandler",
          "description": "Protocol for objects that have slash command handler.",
          "attributes": [
            {
              "name": "slash_handler",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasMessageValidator",
          "description": "Protocol for objects that have message validator.",
          "attributes": [
            {
              "name": "message_validator",
              "type": "Any",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "HasConfigManager",
          "description": "Protocol for objects that have configuration manager.",
          "attributes": [
            {
              "name": "config_manager",
              "type": "'ConfigManager'",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "DiscordBotClient",
          "description": "Protocol for Discord bot client interface required by HealthMonitor.",
          "attributes": [],
          "methods": [
            {
              "name": "guilds",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Any",
              "description": "List of guilds the bot is in."
            },
            {
              "name": "get_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "Any",
              "description": "Get a channel by ID."
            },
            {
              "name": "is_closed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if the client is closed."
            },
            {
              "name": "close",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Close the client connection."
            },
            {
              "name": "__getattr__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "Allow dynamic attribute access for optional components."
            }
          ]
        },
        {
          "name": "StatsLike",
          "description": "Minimal stats mapping used by StartupManager.",
          "attributes": [],
          "methods": [
            {
              "name": "__getitem__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            },
            {
              "name": "__setitem__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "value",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "No docstring provided"
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "default",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            }
          ]
        },
        {
          "name": "StartupBot",
          "description": "Protocol capturing the attributes StartupManager needs to access on the bot.",
          "attributes": [
            {
              "name": "user",
              "type": "Any | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "tree",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "guilds",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "stats",
              "type": "StatsLike",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "startup_complete",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "startup_connection_failures",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "monitor_task",
              "type": "Any | None",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": [
            {
              "name": "change_presence",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "status",
                  "type": "Any"
                },
                {
                  "name": "activity",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "No docstring provided"
            },
            {
              "name": "get_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            },
            {
              "name": "__getattr__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "name",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "No docstring provided"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.slash.__init__",
      "description": "Slash command handling for Discord Voice TTS Bot.",
      "classes": [],
      "functions": []
    },
    {
      "name": "discord_voice_bot.slash.autocomplete.voice",
      "description": "Voice autocomplete handler.",
      "classes": [],
      "functions": [
        {
          "name": "voice_autocomplete",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "current",
              "type": "str"
            }
          ],
          "return_type": "list[app_commands.Choice[str]]",
          "description": "Provide autocomplete suggestions for voice selection."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.embeds.status",
      "description": "Status embed creation for slash commands.",
      "classes": [],
      "functions": [
        {
          "name": "create_status_embed",
          "parameters": [
            {
              "name": "status",
              "type": "dict[str, Any]"
            }
          ],
          "return_type": "discord.Embed",
          "description": "Create status embed from status data."
        },
        {
          "name": "create_basic_status_embed",
          "parameters": [],
          "return_type": "discord.Embed",
          "description": "Create basic status embed when status manager is not available."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.embeds.voices",
      "description": "Voices embed creation for slash commands.",
      "classes": [],
      "functions": [
        {
          "name": "create_voices_embed",
          "parameters": [],
          "return_type": "discord.Embed",
          "description": "Create voices embed showing available speakers."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.__init__",
      "description": "Slash command handlers.",
      "classes": [],
      "functions": []
    },
    {
      "name": "discord_voice_bot.slash.handlers.clear",
      "description": "Clear slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle clear slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.reconnect",
      "description": "Reconnect slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle reconnect slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.skip",
      "description": "Skip slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle skip slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.status",
      "description": "Status slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle status slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.test_tts",
      "description": "Test TTS slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            },
            {
              "name": "text",
              "type": "str"
            }
          ],
          "return_type": "None",
          "description": "Handle test slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.voice",
      "description": "Voice slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            },
            {
              "name": "speaker",
              "type": "str | None"
            }
          ],
          "return_type": "None",
          "description": "Handle voice slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.voicecheck",
      "description": "Voicecheck slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle voicecheck slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.handlers.voices",
      "description": "Voices slash command handler.",
      "classes": [],
      "functions": [
        {
          "name": "handle",
          "parameters": [
            {
              "name": "interaction",
              "type": "discord.Interaction"
            },
            {
              "name": "bot",
              "type": "DiscordVoiceTTSBot"
            }
          ],
          "return_type": "None",
          "description": "Handle voices slash command."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash.registry",
      "description": "Slash command registry for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "SlashCommandRegistry",
          "description": "Manages Discord slash command registration and synchronization.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_registered",
              "type": "dict[str, dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "commands.Bot"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize slash command registry.\n\nArgs:\n    bot: The Discord bot instance"
            },
            {
              "name": "register_slash_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Register all slash commands with Discord."
            },
            {
              "name": "_register_core",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Register core bot commands."
            },
            {
              "name": "_register_voice",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Register voice-related commands."
            },
            {
              "name": "_register_util",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Register utility commands."
            },
            {
              "name": "_sync",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "guild",
                  "type": "discord.Guild | None"
                }
              ],
              "return_type": "None",
              "description": "Sync slash commands with Discord.\n\nArgs:\n    guild: Optional guild to sync commands to (for testing)"
            },
            {
              "name": "handle_interaction",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "interaction",
                  "type": "discord.Interaction"
                }
              ],
              "return_type": "None",
              "description": "Handle slash command interactions.\n\nArgs:\n    interaction: Discord interaction object"
            },
            {
              "name": "get_registered_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, dict[str, Any]]",
              "description": "Get information about registered slash commands."
            },
            {
              "name": "clear_commands",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clear all registered slash commands."
            },
            {
              "name": "shutdown",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Shutdown slash command registry."
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "_get_handler",
          "parameters": [
            {
              "name": "name",
              "type": "str"
            }
          ],
          "return_type": "Return type unclear from code",
          "description": "Get handler function by name."
        }
      ]
    },
    {
      "name": "discord_voice_bot.slash_command_handler",
      "description": "Slash command handling for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "SlashCommandHandler",
          "description": "Handles Discord slash commands with modern app command framework.\n\nDEPRECATED: This class is kept for backward compatibility.\nUse discord_voice_bot.slash.SlashCommandHandler instead.",
          "attributes": [],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "'DiscordVoiceTTSBot'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Initialize slash command handler.\n\nArgs:\n    bot: The Discord bot instance"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.speaker_mapping",
      "description": "Speaker mapping between different TTS engines.",
      "classes": [],
      "functions": [
        {
          "name": "get_compatible_speaker",
          "parameters": [
            {
              "name": "speaker_id",
              "type": "int"
            },
            {
              "name": "from_engine",
              "type": "str"
            },
            {
              "name": "to_engine",
              "type": "str"
            },
            {
              "name": "engine_configs",
              "type": "dict[str, dict[str, Any]]"
            }
          ],
          "return_type": "int | None",
          "description": "Get compatible speaker ID for different engine.\n\nArgs:\n    speaker_id: Original speaker ID\n    from_engine: Source engine name (voicevox or aivis)\n    to_engine: Target engine name (voicevox or aivis)\n    engine_configs: Engine configuration dictionary from config\n\nReturns:\n    Compatible speaker ID for target engine, or None if same engine"
        },
        {
          "name": "get_speaker_info",
          "parameters": [
            {
              "name": "speaker_id",
              "type": "int"
            },
            {
              "name": "engine",
              "type": "str"
            }
          ],
          "return_type": "dict[str, Any]",
          "description": "Get speaker information for given ID and engine.\n\nArgs:\n    speaker_id: Speaker ID\n    engine: Engine name (voicevox or aivis)\n\nReturns:\n    Speaker information dict with name and engine"
        }
      ]
    },
    {
      "name": "discord_voice_bot.status_manager",
      "description": "Status management and statistics tracking for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "BotStats",
          "description": "Bot statistics container.",
          "attributes": [
            {
              "name": "messages_processed",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "tts_messages_played",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "connection_errors",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "uptime_start",
              "type": "float | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "command_usage",
              "type": "dict[str, int]",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "voice_connections",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "voice_disconnections",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "failed_tts_requests",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "average_response_time",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "peak_concurrent_users",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "total_guilds",
              "type": "int",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "VoiceStatus",
          "description": "Voice connection status.",
          "attributes": [
            {
              "name": "connected",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "channel_name",
              "type": "str | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "channel_id",
              "type": "int | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "is_playing",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "queue_size",
              "type": "int",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "current_group",
              "type": "str | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "connection_time",
              "type": "float | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "last_activity",
              "type": "float | None",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "SystemHealth",
          "description": "System health metrics.",
          "attributes": [
            {
              "name": "tts_engine_healthy",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "voice_system_healthy",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "memory_usage",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "cpu_usage",
              "type": "float",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "last_health_check",
              "type": "float | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "health_check_failures",
              "type": "int",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": []
        },
        {
          "name": "StatusManager",
          "description": "Manages bot statistics and status tracking.",
          "attributes": [
            {
              "name": "stats",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "voice_status",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "health",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_command_timings",
              "type": "dict[str, list[float]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_response_times",
              "type": "list[float]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_status_update_callbacks",
              "type": "list[Callable[[], Any]]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize status manager."
            },
            {
              "name": "record_message_processed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a message being processed."
            },
            {
              "name": "record_tts_played",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a TTS message being played."
            },
            {
              "name": "record_connection_error",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a connection error."
            },
            {
              "name": "record_command_usage",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "command_name",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Record command usage.\n\nArgs:\n    command_name: Name of the command used"
            },
            {
              "name": "record_voice_connection",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a voice connection."
            },
            {
              "name": "record_voice_disconnection",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a voice disconnection."
            },
            {
              "name": "record_tts_failure",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a TTS request failure."
            },
            {
              "name": "record_response_time",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "response_time",
                  "type": "float"
                }
              ],
              "return_type": "None",
              "description": "Record response time for performance monitoring.\n\nArgs:\n    response_time: Response time in seconds"
            },
            {
              "name": "update_voice_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "connected",
                  "type": "bool | None"
                },
                {
                  "name": "channel_name",
                  "type": "str | None"
                },
                {
                  "name": "channel_id",
                  "type": "int | None"
                },
                {
                  "name": "is_playing",
                  "type": "bool | None"
                },
                {
                  "name": "queue_size",
                  "type": "int | None"
                },
                {
                  "name": "current_group",
                  "type": "str | None"
                }
              ],
              "return_type": "None",
              "description": "Update voice connection status.\n\nArgs:\n    connected: Voice connection status\n    channel_name: Voice channel name\n    channel_id: Voice channel ID\n    is_playing: Whether audio is playing\n    queue_size: Size of audio queue\n    current_group: Current message group being played"
            },
            {
              "name": "update_system_health",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "tts_engine_healthy",
                  "type": "bool | None"
                },
                {
                  "name": "voice_system_healthy",
                  "type": "bool | None"
                },
                {
                  "name": "memory_usage",
                  "type": "float | None"
                },
                {
                  "name": "cpu_usage",
                  "type": "float | None"
                }
              ],
              "return_type": "None",
              "description": "Update system health metrics.\n\nArgs:\n    tts_engine_healthy: TTS engine health status\n    voice_system_healthy: Voice system health status\n    memory_usage: Memory usage percentage\n    cpu_usage: CPU usage percentage"
            },
            {
              "name": "update_guild_count",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "count",
                  "type": "int"
                }
              ],
              "return_type": "None",
              "description": "Update total guild count.\n\nArgs:\n    count: Number of guilds the bot is in"
            },
            {
              "name": "update_presence",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot",
                  "type": "discord.Client"
                }
              ],
              "return_type": "None",
              "description": "Update bot presence with current status.\n\nArgs:\n    bot: Discord bot client"
            },
            {
              "name": "get_overall_health",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Get overall system health status.\n\nReturns:\n    True if system is healthy, False otherwise"
            },
            {
              "name": "get_uptime_seconds",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "float",
              "description": "Get bot uptime in seconds.\n\nReturns:\n    Uptime in seconds"
            },
            {
              "name": "get_uptime_formatted",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get formatted uptime string.\n\nReturns:\n    Formatted uptime string (HH:MM:SS)"
            },
            {
              "name": "get_statistics",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get comprehensive bot statistics.\n\nReturns:\n    Dictionary with all statistics"
            },
            {
              "name": "get_status_summary",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get a brief status summary.\n\nReturns:\n    Status summary string"
            },
            {
              "name": "reset_statistics",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset all statistics (useful for debugging)."
            },
            {
              "name": "add_status_callback",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "callback",
                  "type": "Callable[[], Any]"
                }
              ],
              "return_type": "None",
              "description": "Add a callback for status updates.\n\nArgs:\n    callback: Function to call when status updates"
            },
            {
              "name": "remove_status_callback",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "callback",
                  "type": "Callable[[], Any]"
                }
              ],
              "return_type": "None",
              "description": "Remove a status update callback.\n\nArgs:\n    callback: Callback function to remove"
            },
            {
              "name": "_notify_status_callbacks",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Notify all status update callbacks."
            },
            {
              "name": "get_command_timings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, list[float]]",
              "description": "Get command timings for testing.\n\nReturns:\n    Dictionary of command timings"
            },
            {
              "name": "get_response_times",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[float]",
              "description": "Get response times for testing.\n\nReturns:\n    List of response times"
            },
            {
              "name": "get_status_update_callbacks",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[Callable[[], Any]]",
              "description": "Get status update callbacks for testing.\n\nReturns:\n    List of status update callbacks"
            },
            {
              "name": "notify_status_callbacks_for_testing",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Notify all status update callbacks for testing purposes.\n\nThis is a public method to allow tests to trigger callback notifications\nwithout accessing private methods."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.temp_file_manager",
      "description": "Temporary file management for TTS engine.",
      "classes": [
        {
          "name": "TempFileManager",
          "description": "Manages temporary files for TTS audio processing.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_audio_processor",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                },
                {
                  "name": "audio_processor",
                  "type": "AudioProcessor"
                }
              ],
              "return_type": "None",
              "description": "Initialize temp file manager with configuration and audio processor."
            },
            {
              "name": "create_audio_source",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "audio_data",
                  "type": "bytes"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "Any",
              "description": "Create Discord audio source from audio data.\n\nArgs:\n    text: Original text for debugging\n    audio_data: Audio data to create source from\n    speaker_id: Speaker ID used for synthesis\n    engine_name: Engine name used for synthesis\n\nReturns:\n    Discord audio source, or None if creation failed"
            },
            {
              "name": "_debug_audio_conversion",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "temp_path",
                  "type": "str"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "ffmpeg_options",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Debug audio conversion process for troubleshooting.\n\nArgs:\n    temp_path: Path to temporary audio file\n    text: Original text\n    ffmpeg_options: FFmpeg options used"
            },
            {
              "name": "cleanup_audio_source",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_source",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Clean up temporary files from audio source.\n\nArgs:\n    audio_source: Discord audio source to clean up"
            },
            {
              "name": "create_temp_audio_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_data",
                  "type": "bytes"
                },
                {
                  "name": "suffix",
                  "type": "str"
                }
              ],
              "return_type": "str",
              "description": "Create a temporary audio file with the given data.\n\nArgs:\n    audio_data: Audio data to write\n    suffix: File suffix (default: .wav)\n\nReturns:\n    Path to the created temporary file"
            },
            {
              "name": "cleanup_temp_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "file_path",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Clean up a temporary file.\n\nArgs:\n    file_path: Path to the temporary file to clean up"
            },
            {
              "name": "get_temp_directory_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, int | str]",
              "description": "Get information about the temporary directory.\n\nReturns:\n    Dictionary with temporary directory information"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.tts_client",
      "description": "TTS API client for managing communication with TTS services.",
      "classes": [
        {
          "name": "TTSClient",
          "description": "Manages TTS API communication and requests.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_session",
              "type": "aiohttp.ClientSession | None",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize TTS client with configuration manager."
            },
            {
              "name": "api_url",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get current API URL from config manager."
            },
            {
              "name": "speaker_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get current speaker ID from config manager."
            },
            {
              "name": "engine_name",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get current engine name from config manager."
            },
            {
              "name": "session",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "aiohttp.ClientSession | None",
              "description": "Get HTTP session for testing purposes."
            },
            {
              "name": "start_session",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start the HTTP session for API communication."
            },
            {
              "name": "close_session",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Close the HTTP session."
            },
            {
              "name": "check_api_availability",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Check TTS API availability with detailed error information.\n\nReturns:\n    (is_available, error_detail): Tuple of availability status and error description"
            },
            {
              "name": "generate_audio_query",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int"
                },
                {
                  "name": "api_url",
                  "type": "str"
                }
              ],
              "return_type": "dict[str, Any] | None",
              "description": "Generate audio query from text.\n\nArgs:\n    text: Text to generate query for\n    speaker_id: Speaker ID to use\n    api_url: API URL to use\n\nReturns:\n    Audio query dictionary or None if failed"
            },
            {
              "name": "synthesize_from_query",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_query",
                  "type": "dict[str, Any]"
                },
                {
                  "name": "speaker_id",
                  "type": "int"
                },
                {
                  "name": "api_url",
                  "type": "str"
                }
              ],
              "return_type": "bytes | None",
              "description": "Synthesize audio from audio query.\n\nArgs:\n    audio_query: Audio query dictionary\n    speaker_id: Speaker ID to use\n    api_url: API URL to use\n\nReturns:\n    Synthesized audio data or None if failed"
            },
            {
              "name": "synthesize_audio",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "bytes | None",
              "description": "Synthesize audio from text using the specified TTS engine.\n\nArgs:\n    text: Text to synthesize\n    speaker_id: Optional speaker ID override\n    engine_name: Optional engine name ('voicevox' or 'aivis')\n\nReturns:\n    Audio data as bytes, or None if synthesis failed"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.tts_engine",
      "description": "TTS Engine integration for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "TTSEngineError",
          "description": "Exception raised when TTS engine encounters an error.",
          "attributes": [],
          "methods": []
        },
        {
          "name": "TTSEngine",
          "description": "TTS Engine for synthesizing speech using VOICEVOX or AivisSpeech.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_tts_client",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_audio_processor",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_temp_file_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_health_monitor",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_session",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize TTS engine with configuration manager and managers."
            },
            {
              "name": "api_url",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get current API URL from TTS client."
            },
            {
              "name": "speaker_id",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get current speaker ID from TTS client."
            },
            {
              "name": "engine_name",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get current engine name from TTS client."
            },
            {
              "name": "__aenter__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "'TTSEngine'",
              "description": "Async context manager entry."
            },
            {
              "name": "__aexit__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "exc_type",
                  "type": "Any"
                },
                {
                  "name": "exc_val",
                  "type": "Any"
                },
                {
                  "name": "exc_tb",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Async context manager exit."
            },
            {
              "name": "start",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start the TTS engine session."
            },
            {
              "name": "close",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Close the TTS engine session."
            },
            {
              "name": "check_api_availability",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "tuple[bool, str]",
              "description": "Check TTS API availability with detailed error information.\n\nReturns:\n    (is_available, error_detail): Tuple of availability status and error description"
            },
            {
              "name": "synthesize_audio",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "bytes | None",
              "description": "Synthesize audio from text using the specified TTS engine.\n\nArgs:\n    text: Text to synthesize\n    speaker_id: Optional speaker ID override\n    engine_name: Optional engine name ('voicevox' or 'aivis')\n\nReturns:\n    Audio data as bytes, or None if synthesis failed"
            },
            {
              "name": "_generate_audio_query",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "AudioQuery | None",
              "description": "Generate audio query from text using TTS client."
            },
            {
              "name": "_synthesize_from_query",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_query",
                  "type": "AudioQuery"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "bytes | None",
              "description": "Synthesize audio from audio query using TTS client."
            },
            {
              "name": "create_audio_source",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "text",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int | None"
                },
                {
                  "name": "engine_name",
                  "type": "str | None"
                }
              ],
              "return_type": "Any",
              "description": "Create Discord audio source from text using temp file manager.\n\nArgs:\n    text: Text to synthesize\n    speaker_id: Optional speaker ID override\n    engine_name: Optional engine name ('voicevox' or 'aivis')\n\nReturns:\n    Discord audio source, or None if creation failed"
            },
            {
              "name": "_create_wav_header",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "data_size",
                  "type": "int"
                },
                {
                  "name": "sample_rate",
                  "type": "int"
                },
                {
                  "name": "channels",
                  "type": "int"
                }
              ],
              "return_type": "bytes",
              "description": "Create WAV file header for raw PCM data.\n\nArgs:\n    data_size: Size of PCM data in bytes\n    sample_rate: Sample rate in Hz\n    channels: Number of audio channels\n\nReturns:\n    WAV header as bytes"
            },
            {
              "name": "cleanup_audio_source",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_source",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Clean up temporary files from audio source using temp file manager."
            },
            {
              "name": "get_available_speakers",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, int]",
              "description": "Get available speakers for current engine.\n\nReturns:\n    Dictionary mapping speaker names to IDs"
            },
            {
              "name": "health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Perform health check on TTS engine using health monitor."
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_tts_engine",
          "parameters": [
            {
              "name": "config_manager",
              "type": "ConfigManager"
            }
          ],
          "return_type": "TTSEngine",
          "description": "Create new TTS engine instance with configuration manager."
        }
      ]
    },
    {
      "name": "discord_voice_bot.tts_health_monitor",
      "description": "Health monitoring for TTS engine.",
      "classes": [
        {
          "name": "TTSHealthMonitor",
          "description": "Monitors the health of TTS engine components.",
          "attributes": [
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_tts_client",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                },
                {
                  "name": "tts_client",
                  "type": "TTSClient"
                }
              ],
              "return_type": "None",
              "description": "Initialize TTS health monitor with configuration and TTS client."
            },
            {
              "name": "perform_health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Perform comprehensive health check on TTS engine.\n\nReturns:\n    True if TTS engine is healthy, False otherwise"
            },
            {
              "name": "_check_api_health",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if TTS API is available and responding.\n\nReturns:\n    True if API is healthy, False otherwise"
            },
            {
              "name": "_test_synthesis",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Test actual audio synthesis to ensure TTS engine is working.\n\nReturns:\n    True if synthesis test passes, False otherwise"
            },
            {
              "name": "get_health_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get detailed health status of TTS engine.\n\nReturns:\n    Dictionary with health status information"
            },
            {
              "name": "diagnose_issues",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[str]",
              "description": "Diagnose and return a list of potential issues with TTS engine.\n\nReturns:\n    List of diagnostic messages and suggestions"
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.user_settings",
      "description": "User-specific settings management for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "UserSettings",
          "description": "Manages user-specific settings like voice preferences.",
          "attributes": [
            {
              "name": "settings_file",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "settings",
              "type": "dict[str, dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_lock",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "settings_file",
                  "type": "str"
                }
              ],
              "return_type": "None",
              "description": "Initialize user settings manager.\n\nArgs:\n    settings_file: Path to JSON file for persistent storage"
            },
            {
              "name": "_load_settings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Load settings from JSON file."
            },
            {
              "name": "_save_settings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Save settings to JSON file."
            },
            {
              "name": "_initialize_defaults",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize default user settings if not already set."
            },
            {
              "name": "_migrate_settings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Migrate existing user settings to include engine information."
            },
            {
              "name": "get_user_speaker",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "str"
                },
                {
                  "name": "current_engine",
                  "type": "str | None"
                }
              ],
              "return_type": "int | None",
              "description": "Get speaker ID for a specific user, mapping to current engine if needed.\n\nArgs:\n    user_id: Discord user ID as string\n    current_engine: Current TTS engine ('voicevox' or 'aivis')\n\nReturns:\n    Speaker ID compatible with current engine, None if not set"
            },
            {
              "name": "_map_speaker_to_engine",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "speaker_id",
                  "type": "int"
                },
                {
                  "name": "from_engine",
                  "type": "str"
                },
                {
                  "name": "to_engine",
                  "type": "str"
                }
              ],
              "return_type": "int",
              "description": "Map speaker ID from one engine to another.\n\nArgs:\n    speaker_id: Original speaker ID\n    from_engine: Source engine\n    to_engine: Target engine\n\nReturns:\n    Mapped speaker ID, or original if no mapping available"
            },
            {
              "name": "set_user_speaker",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "str"
                },
                {
                  "name": "speaker_id",
                  "type": "int"
                },
                {
                  "name": "speaker_name",
                  "type": "str"
                },
                {
                  "name": "engine",
                  "type": "str | None"
                }
              ],
              "return_type": "bool",
              "description": "Set speaker preference for a user.\n\nArgs:\n    user_id: Discord user ID as string\n    speaker_id: TTS speaker ID\n    speaker_name: Human-readable speaker name\n    engine: TTS engine the speaker belongs to (auto-detected if None)\n\nReturns:\n    True if successful"
            },
            {
              "name": "remove_user_speaker",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "str"
                }
              ],
              "return_type": "bool",
              "description": "Remove speaker preference for a user.\n\nArgs:\n    user_id: Discord user ID as string\n\nReturns:\n    True if removed, False if not found"
            },
            {
              "name": "get_user_settings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "user_id",
                  "type": "str"
                }
              ],
              "return_type": "dict[str, Any] | None",
              "description": "Get all settings for a user.\n\nArgs:\n    user_id: Discord user ID as string\n\nReturns:\n    User settings dict or None"
            },
            {
              "name": "list_all_settings",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, dict[str, Any]]",
              "description": "Get all user settings.\n\nReturns:\n    Dictionary of all user settings"
            },
            {
              "name": "get_stats",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get statistics about user settings.\n\nReturns:\n    Statistics dictionary"
            },
            {
              "name": "get_engine_compatibility_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "current_engine",
                  "type": "str"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get information about engine compatibility for all users.\n\nArgs:\n    current_engine: Current TTS engine\n\nReturns:\n    Dictionary with compatibility information"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "get_user_settings",
          "parameters": [],
          "return_type": "UserSettings",
          "description": "Create new user settings instance."
        }
      ]
    },
    {
      "name": "discord_voice_bot.voice.__init__",
      "description": "Voice handling components for Discord Voice TTS Bot.",
      "classes": [],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.audio_utils",
      "description": "Audio utility functions for voice operations.",
      "classes": [],
      "functions": [
        {
          "name": "validate_wav_format",
          "parameters": [
            {
              "name": "audio_data",
              "type": "bytes"
            }
          ],
          "return_type": "bool",
          "description": "Validate audio data format and basic properties."
        },
        {
          "name": "cleanup_file",
          "parameters": [
            {
              "name": "audio_path",
              "type": "str"
            }
          ],
          "return_type": "None",
          "description": "Clean up temporary audio file."
        },
        {
          "name": "calculate_message_priority",
          "parameters": [
            {
              "name": "item",
              "type": "dict[str, Any]"
            }
          ],
          "return_type": "int",
          "description": "Calculate priority for message processing."
        },
        {
          "name": "create_temp_audio_file",
          "parameters": [
            {
              "name": "audio_data",
              "type": "bytes"
            },
            {
              "name": "suffix",
              "type": "str"
            }
          ],
          "return_type": "str",
          "description": "Create a temporary audio file with the given data."
        },
        {
          "name": "get_audio_size",
          "parameters": [
            {
              "name": "audio_data",
              "type": "bytes"
            }
          ],
          "return_type": "int",
          "description": "Get the size of audio data in bytes."
        }
      ]
    },
    {
      "name": "discord_voice_bot.voice.connection_manager",
      "description": "Voice connection management for voice handler.",
      "classes": [
        {
          "name": "VoiceConnectionManager",
          "description": "Manages Discord voice connections and related functionality.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "voice_client",
              "type": "discord.VoiceClient | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "voice_gateway",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "target_channel",
              "type": "discord.VoiceChannel | discord.StageChannel | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "connection_state",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_last_connection_attempt",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_reconnection_cooldown",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot_client",
                  "type": "discord.Client"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize voice connection manager."
            },
            {
              "name": "connect_to_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "bool",
              "description": "Connect to a voice channel with comprehensive error handling."
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_STATE_UPDATE event."
            },
            {
              "name": "is_connected",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if the bot is connected to a voice channel."
            },
            {
              "name": "cleanup_voice_client",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Aggressively clean up voice client state."
            },
            {
              "name": "get_connection_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current connection information."
            },
            {
              "name": "last_connection_attempt",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "float",
              "description": "Get the timestamp of the last connection attempt."
            },
            {
              "name": "reconnection_cooldown",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get the reconnection cooldown duration in seconds."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.gateway",
      "description": "Voice gateway connection manager for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "VoiceGatewayManager",
          "description": "Manages voice gateway connections following Discord's official steps.",
          "attributes": [
            {
              "name": "voice_client",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_session_id",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_token",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_endpoint",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_guild_id",
              "type": "int | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_connected",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "voice_client",
                  "type": "discord.VoiceClient"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "No docstring provided"
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event following Discord's official steps."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_STATE_UPDATE event."
            },
            {
              "name": "_ensure_proper_voice_setup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Ensure voice connection follows Discord's official patterns."
            },
            {
              "name": "get_connection_info",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get voice connection information for debugging."
            },
            {
              "name": "is_connected",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if voice gateway connection is established."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.handler",
      "description": "Voice handler facade for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "VoiceHandlerInterface",
          "description": "Interface for voice handler to avoid circular imports.",
          "attributes": [
            {
              "name": "synthesis_queue",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "audio_queue",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "_config_manager",
              "type": "ConfigManager",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "voice_client",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "target_channel",
              "type": "Any",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "current_group_id",
              "type": "str | None",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "is_playing",
              "type": "bool",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "stats",
              "type": "'StatsTracker'",
              "description": "Class attribute (annotated)"
            },
            {
              "name": "connection_state",
              "type": "str",
              "description": "Class attribute (annotated)"
            }
          ],
          "methods": [
            {
              "name": "start",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start the voice handler tasks."
            },
            {
              "name": "is_connected",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if the bot is connected to a voice channel."
            },
            {
              "name": "connect_to_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "bool",
              "description": "Connect to a voice channel."
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_STATE_UPDATE event."
            },
            {
              "name": "make_rate_limited_request",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "api_call",
                  "type": "Any"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Make a rate-limited API request."
            },
            {
              "name": "add_to_queue",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message_data",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Add message to synthesis queue."
            },
            {
              "name": "skip_current",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Skip the current message group."
            },
            {
              "name": "clear_all",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Clear all queues."
            },
            {
              "name": "get_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current status information."
            },
            {
              "name": "health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Perform voice connection health check."
            },
            {
              "name": "cleanup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clean up resources."
            },
            {
              "name": "cleanup_voice_client",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clean up voice client state."
            }
          ]
        },
        {
          "name": "VoiceHandler",
          "description": "Manages Discord voice connections and audio playback using facade pattern.",
          "attributes": [
            {
              "name": "bot",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "connection_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "queue_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "rate_limiter_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "stats_tracker",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "task_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "health_monitor",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "is_playing",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "voice_client",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "target_channel",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "connection_state",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "synthesis_queue",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "audio_queue",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "current_group_id",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "stats",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "rate_limiter",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "circuit_breaker",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_last_connection_attempt",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_reconnection_cooldown",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "tasks",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot_client",
                  "type": "discord.Client"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize voice handler with manager components."
            },
            {
              "name": "voice_gateway",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "Get voice gateway from connection manager."
            },
            {
              "name": "voice_gateway",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "value",
                  "type": "'VoiceGatewayManager | None'"
                }
              ],
              "return_type": "None",
              "description": "Set voice gateway in connection manager."
            },
            {
              "name": "start",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Start the voice handler tasks."
            },
            {
              "name": "add_worker_task",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "task",
                  "type": "asyncio.Task[None]"
                }
              ],
              "return_type": "None",
              "description": "Add a worker task to be managed by the handler."
            },
            {
              "name": "is_connected",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if the bot is connected to a voice channel."
            },
            {
              "name": "connect_to_channel",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "channel_id",
                  "type": "int"
                }
              ],
              "return_type": "bool",
              "description": "Connect to a voice channel using connection manager."
            },
            {
              "name": "handle_voice_server_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_SERVER_UPDATE event with proper Discord API compliance."
            },
            {
              "name": "handle_voice_state_update",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "payload",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Handle VOICE_STATE_UPDATE event with proper Discord API compliance."
            },
            {
              "name": "make_rate_limited_request",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "api_call",
                  "type": "Any"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Make a rate-limited API request with circuit breaker pattern."
            },
            {
              "name": "add_to_queue",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message_data",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Add message to synthesis queue with deduplication."
            },
            {
              "name": "skip_current",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Skip the current message group."
            },
            {
              "name": "clear_all",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Clear all queues."
            },
            {
              "name": "get_status",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current status information from all managers."
            },
            {
              "name": "health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Perform comprehensive voice connection health check."
            },
            {
              "name": "cleanup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Clean up resources."
            },
            {
              "name": "cleanup_voice_client",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Aggressively clean up voice client state."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.health",
      "description": "Health check utilities for voice operations.",
      "classes": [],
      "functions": [
        {
          "name": "health_check",
          "parameters": [
            {
              "name": "voice_handler",
              "type": "'VoiceHandlerInterface'"
            }
          ],
          "return_type": "dict[str, Any]",
          "description": "Perform comprehensive voice connection health check."
        }
      ]
    },
    {
      "name": "discord_voice_bot.voice.health_monitor",
      "description": "Health monitoring for voice handler.",
      "classes": [
        {
          "name": "HealthMonitor",
          "description": "Monitors the health of voice-related components.",
          "attributes": [
            {
              "name": "connection_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "connection_manager",
                  "type": "Any"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "None",
              "description": "Initialize health monitor."
            },
            {
              "name": "perform_health_check",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Perform comprehensive voice system health check."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.queue_manager",
      "description": "Queue management for voice handler.",
      "classes": [
        {
          "name": "QueueManager",
          "description": "Manages synthesis and audio queues for voice handler.",
          "attributes": [
            {
              "name": "synthesis_queue",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "audio_queue",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "current_group_id",
              "type": "str | None",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_recent_messages",
              "type": "list[int]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize queue manager."
            },
            {
              "name": "add_to_queue",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "message_data",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Add message to synthesis queue with deduplication."
            },
            {
              "name": "skip_current",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Skip the current message group."
            },
            {
              "name": "clear_group_from_synthesis_queue",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "group_id",
                  "type": "str"
                }
              ],
              "return_type": "int",
              "description": "Clear items with specific group_id from synthesis queue."
            },
            {
              "name": "clear_group",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "group_id",
                  "type": "str"
                }
              ],
              "return_type": "int",
              "description": "Clear a specific group from audio queue."
            },
            {
              "name": "clear_all",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Clear all queues."
            },
            {
              "name": "get_queue_sizes",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, int]",
              "description": "Get current queue sizes."
            },
            {
              "name": "set_current_group",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "group_id",
                  "type": "str | None"
                }
              ],
              "return_type": "None",
              "description": "Set the current group ID."
            },
            {
              "name": "get_current_group",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str | None",
              "description": "Get the current group ID."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.queues",
      "description": "Queue implementations for voice operations.",
      "classes": [
        {
          "name": "SynthesisQueue",
          "description": "Priority queue for TTS synthesis requests.",
          "attributes": [
            {
              "name": "_queue",
              "type": "asyncio.Queue[dict[str, Any]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "maxsize",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "maxsize",
                  "type": "int"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "No docstring provided"
            },
            {
              "name": "put",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "item",
                  "type": "dict[str, Any]"
                }
              ],
              "return_type": "None",
              "description": "Add item to synthesis queue."
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get item from synthesis queue."
            },
            {
              "name": "qsize",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get queue size."
            },
            {
              "name": "empty",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if queue is empty."
            },
            {
              "name": "clear",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Clear all items from queue."
            },
            {
              "name": "get_nowait",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get item from queue without waiting (synchronous)."
            }
          ]
        },
        {
          "name": "PriorityAudioQueue",
          "description": "Priority queue for audio playback with proper ordering.",
          "attributes": [
            {
              "name": "_heap",
              "type": "list[tuple[int, int, str, str, int, int]]",
              "description": "Instance attribute (annotated in __init__)"
            },
            {
              "name": "_lock",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_counter",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "No docstring provided"
            },
            {
              "name": "put",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "item",
                  "type": "tuple[str, str, int, int]"
                }
              ],
              "return_type": "None",
              "description": "Add item to priority queue with proper ordering."
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "tuple[str, str, int, int]",
              "description": "Get highest priority item from queue (lowest priority number first)."
            },
            {
              "name": "qsize",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get queue size."
            },
            {
              "name": "empty",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if queue is empty."
            },
            {
              "name": "clear",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Clear all items from queue."
            },
            {
              "name": "clear_group",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "group_id",
                  "type": "str"
                }
              ],
              "return_type": "int",
              "description": "Clear all items with specified group_id from queue."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.rate_limiter_manager",
      "description": "Rate limiting and circuit breaker management for voice handler.",
      "classes": [
        {
          "name": "CircuitBreakerOpenError",
          "description": "Raised when circuit breaker is open and requests cannot be made.",
          "attributes": [],
          "methods": []
        },
        {
          "name": "RateLimiterManager",
          "description": "Manages rate limiting and circuit breaker functionality.",
          "attributes": [
            {
              "name": "rate_limiter",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "circuit_breaker",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize rate limiter manager."
            },
            {
              "name": "make_rate_limited_request",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "api_call",
                  "type": "Callable[..., Any]"
                },
                {
                  "name": "*args",
                  "type": "Any"
                },
                {
                  "name": "**kwargs",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Make a rate-limited API request with circuit breaker pattern."
            },
            {
              "name": "_extract_retry_after",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "exception",
                  "type": "discord.HTTPException"
                }
              ],
              "return_type": "str",
              "description": "Extract retry-after value from HTTP exception."
            },
            {
              "name": "can_make_request",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if a request can be made through the circuit breaker."
            },
            {
              "name": "get_circuit_breaker_state",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "str",
              "description": "Get the current circuit breaker state."
            },
            {
              "name": "reset_circuit_breaker",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset the circuit breaker to closed state."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.ratelimit",
      "description": "Rate limiting utilities for voice operations.",
      "classes": [
        {
          "name": "SimpleRateLimiter",
          "description": "Simple rate limiter that respects Discord's global limit.",
          "attributes": [
            {
              "name": "last_request_time",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "No docstring provided"
            },
            {
              "name": "wait_if_needed",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Wait to respect Discord's 50 requests per second global limit."
            }
          ]
        },
        {
          "name": "CircuitBreaker",
          "description": "Circuit breaker pattern for API failure handling.",
          "attributes": [
            {
              "name": "failure_threshold",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "recovery_timeout",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "failure_count",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "last_failure_time",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "state",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "failure_threshold",
                  "type": "int"
                },
                {
                  "name": "recovery_timeout",
                  "type": "float"
                }
              ],
              "return_type": "None",
              "description": "No docstring provided"
            },
            {
              "name": "can_make_request",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "bool",
              "description": "Check if a request can be made."
            },
            {
              "name": "record_success",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a successful request."
            },
            {
              "name": "record_failure",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Record a failed request."
            },
            {
              "name": "get_state",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current circuit breaker state."
            },
            {
              "name": "reset",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset the circuit breaker to closed state."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.stats_tracker",
      "description": "Statistics tracking for voice handler.",
      "classes": [
        {
          "name": "StatsTracker",
          "description": "Manages voice handler statistics.",
          "attributes": [
            {
              "name": "stats",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize stats tracker."
            },
            {
              "name": "increment_messages_played",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Increment messages played counter."
            },
            {
              "name": "increment_messages_skipped",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Increment messages skipped counter."
            },
            {
              "name": "increment_errors",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Increment errors counter."
            },
            {
              "name": "get_stats",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "dict[str, Any]",
              "description": "Get current statistics."
            },
            {
              "name": "reset_stats",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Reset all statistics to zero."
            },
            {
              "name": "get",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "default",
                  "type": "Any"
                }
              ],
              "return_type": "Any",
              "description": "Get a stat value by key, maintaining dict-like access for backward compatibility."
            },
            {
              "name": "current_count",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get total count of processed messages for backward compatibility."
            },
            {
              "name": "__getitem__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                }
              ],
              "return_type": "Any",
              "description": "Dict-like access for backward compatibility."
            },
            {
              "name": "__setitem__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "key",
                  "type": "str"
                },
                {
                  "name": "value",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Dict-like assignment for backward compatibility."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.status",
      "description": "Status utilities for voice operations.",
      "classes": [],
      "functions": [
        {
          "name": "build_status",
          "parameters": [
            {
              "name": "voice_handler",
              "type": "'VoiceHandlerInterface'"
            }
          ],
          "return_type": "dict[str, Any]",
          "description": "Build status information for voice handler."
        }
      ]
    },
    {
      "name": "discord_voice_bot.voice.task_manager",
      "description": "Task management for voice handler.",
      "classes": [
        {
          "name": "TaskManager",
          "description": "Manages asyncio tasks for voice handler.",
          "attributes": [
            {
              "name": "tasks",
              "type": "list[asyncio.Task[None]]",
              "description": "Instance attribute (annotated in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Initialize task manager."
            },
            {
              "name": "add_task",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "task",
                  "type": "asyncio.Task[None]"
                }
              ],
              "return_type": "None",
              "description": "Add a task to be managed."
            },
            {
              "name": "get_tasks",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "list[asyncio.Task[None]]",
              "description": "Get list of managed tasks."
            },
            {
              "name": "cleanup",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Cancel and cleanup all managed tasks."
            },
            {
              "name": "get_task_count",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get the number of managed tasks."
            },
            {
              "name": "get_active_task_count",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "int",
              "description": "Get the number of active (not done) tasks."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.workers.player",
      "description": "Player worker for voice operations.",
      "classes": [
        {
          "name": "PlayerWorker",
          "description": "Worker for processing audio playback requests.",
          "attributes": [
            {
              "name": "voice_handler",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "voice_handler",
                  "type": "'VoiceHandlerInterface'"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "No docstring provided"
            },
            {
              "name": "run",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Run the playback worker loop."
            },
            {
              "name": "_playback_complete",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "error",
                  "type": "Exception | None"
                }
              ],
              "return_type": "None",
              "description": "Handle playback completion."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice.workers.synthesizer",
      "description": "Synthesizer worker for voice operations.",
      "classes": [
        {
          "name": "SynthesizerWorker",
          "description": "Worker for processing TTS synthesis requests.",
          "attributes": [
            {
              "name": "voice_handler",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_config_manager",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "max_buffer_size",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "buffer_size",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_tts_engine",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            },
            {
              "name": "_user_settings",
              "type": "Type unclear from code",
              "description": "Instance attribute (set in __init__)"
            }
          ],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "voice_handler",
                  "type": "'VoiceHandlerInterface'"
                },
                {
                  "name": "config_manager",
                  "type": "ConfigManager"
                }
              ],
              "return_type": "Return type unclear from code",
              "description": "No docstring provided"
            },
            {
              "name": "run",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                }
              ],
              "return_type": "None",
              "description": "Run the synthesis worker loop."
            },
            {
              "name": "_create_temp_audio_file",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "audio_data",
                  "type": "bytes"
                }
              ],
              "return_type": "str",
              "description": "Create a temporary audio file with the given data."
            }
          ]
        }
      ],
      "functions": []
    },
    {
      "name": "discord_voice_bot.voice_handler",
      "description": "Voice connection handler for Discord Voice TTS Bot.",
      "classes": [
        {
          "name": "VoiceHandler",
          "description": "Manages Discord voice connections and audio playback.\n\nDEPRECATED: This class is kept for backward compatibility.\nUse discord_voice_bot.voice.VoiceHandler instead.",
          "attributes": [],
          "methods": [
            {
              "name": "__init__",
              "parameters": [
                {
                  "name": "self",
                  "type": "Type unclear from code"
                },
                {
                  "name": "bot_client",
                  "type": "'DiscordVoiceTTSBot'"
                },
                {
                  "name": "config_manager",
                  "type": "Any"
                }
              ],
              "return_type": "None",
              "description": "Initialize voice handler.\n\nArgs:\n    bot_client: The Discord bot client instance\n    config_manager: Configuration manager (for compatibility)"
            }
          ]
        }
      ],
      "functions": []
    }
  ]
}