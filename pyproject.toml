[build-system]
requires = ["hatchling>=1.24"]
build-backend = "hatchling.build"

[project]
name = "discord-voice-bot"
version = "0.1.0"
description = "Discord voice channel text-to-speech bot with Zundamon voice"
readme = "README.md"
requires-python = ">=3.12,<3.13"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Topic :: Multimedia :: Sound/Audio :: Speech",
  "Topic :: Communications :: Chat",
]
license = { file = "LICENSE" }
dependencies = [
  "discord.py[voice]>=2.6.0",
  "python-dotenv>=1.0",
  "aiofiles>=23.2",
  "loguru>=0.7",
  "zstandard>=0.23.0; platform_python_implementation == 'CPython'",
  "psutil>=7.0.0",
]

[[project.authors]]
name = "Rokurolize"
email = "1701388+Rokurolize@users.noreply.github.com"

[dependency-groups]
dev = [
  "pyright>=1.1.402",
  "poethepoet>=0.26",
  "ruff>=0.12",
  "pytest>=8.3",
  "pytest-asyncio>=0.23",
  "pre-commit>=4.3.0",
]

[project.scripts]
discord-voice-bot = "discord_voice_bot.__main__:sync_main"

[tool.hatch.build.targets.wheel]
packages = ["src/discord_voice_bot"]

[tool.uv]
package = true

[tool.poe.tasks]

# ---- tests ----------------------------------------------------
test = "uv run pytest -q"

# ---- primitives ----------------------------------------------
_ruff_check = "uv run ruff check ."
_ruff_fix = "uv run ruff check . --fix"
_sort_imports = "uv run ruff check . --select I --fix"
_ruff_format = "uv run ruff format ."
_pyright = "uv run pyright ."

# ---- composited tasks -----------------------------------------
format = ["_sort_imports", "_ruff_format"] # 整形のみ
lint = ["_ruff_check"]                     # 検査のみ（非破壊）
type-check = ["_pyright"]                  # 型

# すべての検査（整形はしない）
check = ["lint", "type-check", "test"]

# 自動修正フロー（Ruff → import整列 → Ruff Format）
fix = ["_ruff_fix", "_sort_imports", "_ruff_format"]

[tool.ruff]
target-version = "py312"
src = ["src"]
line-length = 200

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint]
select = [
  "ASYNC",
  "B",
  "C4",
  "C90",
  "COM",
  "D",
  "DTZ",
  "E",
  "F",
  "FLY",
  "G",
  "I",
  "ISC",
  "PIE",
  "PLC",
  "PLE",
  "PLW",
  "RET",
  "RUF",
  "RSE",
  "SIM",
  "TID",
  "UP",
  "W",
  "YTT",
]
fixable = ["ALL"]
ignore = [
  "PLC0415",
  "RUF001",   # Allow fullwidth characters in Japanese strings
  "RUF002",
  "RUF003",   # Allow fullwidth characters in comments
  "RUF005",
  "RUF006",   # Store asyncio.create_task result not always needed
  "RUF013",   # Implicit Optional is acceptable
  "ASYNC110", # asyncio.sleep in while loop is acceptable for simple cases
  "ASYNC221", # subprocess.run in async function is acceptable for debugging
  "SIM118",
  "SIM108",
  "E501",
  "E741",
  "B008",
  "B011",
  "B028",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D200",
  "D203",
  "D213",
  "D401",
  "D402",
  "DTZ005",
  "E402",
  "E701",
  "E731",
  "C408",
  "E203",
  "G004",
  "RET505",
  "D106",
  "D205",
  "D212",
  "PLW2901",
  "B027",
  "D404",
  "D407",
  "D408",
  "D409",
  "D400",
  "D415",
  "COM812",
  "RET503",
  "RET504",
  "UP038",
  "UP041",
  "F403",
  "F405",
  "C401",
  "C901",
  "ASYNC230",
  "ISC003",
  "B024",
  "B007",
  "SIM102",
  "W291",
  "W293",
  "B009",
  "SIM103",
  "SIM110",
  "G001",
  "E722",
  "SIM105",
  "SIM113",
  "E712",
  "UP007",
  "TID252",
  "B904",
  "RUF012",
  "SIM117",
  "C400",
  "UP037",
  "UP045",
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM819",
]
unfixable = ["F841", "F601", "F602", "B018"]
extend-fixable = ["F401", "B905"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "D",       # pydocstyle 系（テストに docstring 強制しない）
  "ANN",     # 署名の型ヒント必須を緩和
  "S101",    # assert 許可（flake8-bandit）
  "PLR2004", # マジックナンバー許可
  "ARG",     # 未使用引数（fixture用）を許可
  "PT011",   # pytest.raises に match 指定強制を緩める
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.pyright]
include = ["src", "test_discord_api"]
ignore = ["tests/**"]
pythonVersion = "3.12"
pythonPlatform = "Linux"
venvPath = "."
venv = ".venv"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
deprecateTypingAliases = true
enableReachabilityAnalysis = true
typeCheckingMode = "strict"
reportMissingTypeStubs = true
reportImportCycles = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportTypeCommentUsage = true
reportConstantRedefinition = true
reportDeprecated = true
reportInconsistentConstructor = true
reportMissingSuperCall = true
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = true
reportUnknownMemberType = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportCallInDefaultInitializer = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
reportUnreachable = true
reportImplicitOverride = true
reportShadowedImports = true
reportPropertyTypeMismatch = true
reportUnusedCallResult = true


[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "-ra -q"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
filterwarnings = [
  "error::RuntimeWarning:.*was never awaited", # 未awaitはエラーに
  "ignore::DeprecationWarning:discord\\.",     # discord.pyの警告は一旦無視
  "ignore::DeprecationWarning:.*audioop.*",    # audioop deprecation warnings
]
