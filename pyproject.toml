[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "discord-voice-bot"
version = "0.1.0"
description = "Discord voice channel text-to-speech bot with Zundamon voice"
authors = [{name = "Discord Voice Bot", email = "discord-voice-bot@example.com"}]
readme = "README.md"
requires-python = ">=3.11, <3.12"
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
    "discord.py[voice]>=2.3.2",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.9.1",
    "aiofiles>=23.2.0",
    "loguru>=0.7.2",
]

[project.optional-dependencies]
dev = [
    "black>=23.7.0",
    "mypy>=1.16.1",
    "poethepoet>=0.20.0",
    "pytest>=8.0.2",
    "pytest-asyncio>=0.23.2",
    "ruff>=0.0.285",
]

[project.scripts]
discord-voice-bot = "main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 140
target-version = ["py311"]

[tool.mypy]
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false

[tool.poe.tasks]
test = "pytest tests -vv"
_black_check = "black --check src tests"
_ruff_check = "ruff check src tests"
_black_format = "black src tests"
_ruff_format = "ruff check --fix src tests"
lint = ["_black_check", "_ruff_check"]
format = ["_ruff_format", "_black_format"]
_mypy = "mypy src"
type-check = ["_mypy"]

[tool.ruff]
target-version = "py311"
line-length = 140

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint]
select = [
  "ASYNC",
  "B",
  "C4",
  "C90",
  "COM",
  "D",
  "DTZ",
  "E",
  "F",
  "FLY",
  "G",
  "I",
  "ISC",
  "PIE",
  "PLC",
  "PLE",
  "PLW",
  "RET",
  "RUF",
  "RSE",
  "SIM",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  "PLC0415",
  "RUF001",  # Allow fullwidth characters in Japanese strings
  "RUF002",
  "RUF003",  # Allow fullwidth characters in comments
  "RUF005",
  "RUF006",  # Store asyncio.create_task result not always needed
  "RUF013",  # Implicit Optional is acceptable
  "ASYNC110",  # asyncio.sleep in while loop is acceptable for simple cases
  "ASYNC221",  # subprocess.run in async function is acceptable for debugging
  "SIM118",
  "SIM108",
  "E501",
  "E741",
  "B008",
  "B011",
  "B028",
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D107",
  "D200",
  "D203",
  "D213",
  "D401",
  "D402",
  "DTZ005",
  "E402",
  "E501",
  "E701",
  "E731",
  "C408",
  "E203",
  "G004",
  "RET505",
  "D106",
  "D205",
  "D212",
  "PLW2901",
  "B027",
  "D404",
  "D407",
  "D408",
  "D409",
  "D400",
  "D415",
  "COM812",
  "RET503",
  "RET504",
  "UP038",
  "F403",
  "F405",
  "C401",
  "C901",
  "ASYNC230",
  "ISC003",
  "B024",
  "B007",
  "SIM102",
  "W291",
  "W293",
  "B009",
  "SIM103",
  "SIM110",
  "G001",
  "E722",
  "SIM105",
  "SIM113",
  "E712",
  "UP007",
  "TID252",
  "B904",
  "RUF012",
  "SIM117",
  "C400",
  "UP037",
  "UP045",
]
unfixable = ["F841", "F601", "F602", "B018"]
extend-fixable = ["F401", "B905", "W291"]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D103"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]